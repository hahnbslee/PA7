/*************************************************
  * Author: Hahnbee Lee
  * CS112 Intro to Programming I
  * GS@IP Fall 2017
  * 
  * Programming Assignment 3
  * 
  * Description: Figure out who is friends with who by
  * comparing the names lexicographically & figure out
  * how many friends everyone has
  *
  * Honor Code: No joint work is permitted for some assesments such as Programming Assignments (PAs) and exams,
  * any submitted work must be yours alone.
  * Honor code violation may result in failing the course or referral to the Honor Committee.
  * **********************************************/


import java.util.Scanner;
public class SocialNet {
   public static void main(String[] args) {
      Scanner input = new Scanner (System.in); //create scanner named input
      int size = 0;

      System.out.println("What is the total number of friends in the network:"); //ask how many friends?
      boolean isInt = input.hasNextInt();
   while (!isInt){ //check if input is int
      System.out.println(input.next() + "is an incorrect input! Please enter an integer."); //if false ask for int
      isInt = input.hasNextInt();
   } 
   size = input.nextInt(); //if true, set int input as size
   
   while (size < 1){ //check if size < 1
      System.out.println("You need to have at least one friend in the network. Please enter again:"); //if true ask for input again
      size = input.nextInt(); 
   }
      int myArr[][] = new int[size][size]; // set size to the size of a 2d array
      String names[] = new String[size]; 
      for(int i=0; i<size; i++){ //repeats till you cover all friends
         System.out.println("Enter name:"); //enter name for each friend
         names[i] = input.next(); //set input into names array
      }


      
      
      //see who is friends with who
      for(int i=0;i<size;i++){ //sifts through 1st dimension of array
         for(int j=i+1; j<size;j++){ //sifts through 2nd dimension of array
            if(i ==j){ //individual is not friends w/ themselves 
               myArr[i][j] = 0;
            }   
            else if(Math.abs(names[i].compareTo(names[j]))<= 12){ //is friends if lexicographic difference <= 12
               myArr[i][j] = 1; 
               myArr[j][i] = 1; //if x is friends w/ y then y is friends w/ x                            
            }
            else{ // if lexicograph difference > 12 = not friends
               myArr[i][j] = 0;
            }
         }
      }
      
      
      //print the table
      System.out.print("\t");
      for(int i=0; i<size; i++){ //goes through all names
         System.out.print(names[i] + "\t"); //print all names on x-axis
      }
      System.out.println();   
      for(int h=0;h<size;h++){ //goes through all names
         System.out.print(names[h] + "\t"); //print name on y-axis
         for(int j=0; j<size;j++){//goes through if name on y-axis is friend w/ the people in the x-axis
            System.out.print(myArr[h][j] + "\t"); //prints 1 or 0 for friend or not friend
         }
      System.out.println();
      }
      
       //total friends count
      System.out.println("Total Friends Count:");
      int totals[] = new int[size]; //create an array of the totals for the different people
      int total = 0; // total = the different total for each person
      for(int i=0;i<size;i++){ //goes through x-axis
         for(int j=0; j<size;j++){ //goes through y-axis
            if(myArr[i][j] == 1){ //if they are friends
               total +=1; //add one to the total
               totals[i] = total; //store in array
            }   
         }
         total = 0; //reset to zero to calculate next person's total
      }
      
      //print totals
      for(int i=0;i<size;i++){ //go through all totals and names
         System.out.print(names[i] + "\t"); // print name
         System.out.print(totals[i]); //print corrosponding total
         System.out.println(); //print line
         //repeat
      }
   }
}
